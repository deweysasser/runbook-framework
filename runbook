#!/usr/bin/env bash
# Make sure we pick up a modern bash, and not the default MacOS bash

# Runbook Framework
# See github.com/deweysasser/runbook-framework

# Before we do anything else, make sure we have the right version of bash
if [ -z "${BASH_VERSINFO}" ] || [ -z "${BASH_VERSINFO[0]}" ] || [ "${BASH_VERSINFO[0]}" -lt 5 ]; then
  echo "Bash version 5 or higher required"
  exit 127
fi

# Make sure it has a value of some kind
RUNBOOK_PATH="${RUNBOOK_PATH:-}"

set -ueo pipefail

# run or doc?
_mode="run"
_verbose=false

_stepnumber=0
_status=0

_red=1
_green=2

# A temporary directory
_tmp="/tmp/$(basename "$0")-runbook-$$"
trap 'rm -rf $_tmp' EXIT
mkdir -p "$_tmp"

# the main event
main() {

  first_arg="${1:-help}"
  shift || true # it appears that shift fails if there are no more args -- that's odd

  case "$first_arg" in
  help) _help; exit;;
  list) _list; exit;;
  doc) echo "Doc not implemented" ;;
  run)
    local file="$1"
    shift
    _run_runbook "$(_resolve_path "$file")" "$@"
    ;;
  *) _run_runbook "$(_resolve_path "$first_arg")" "$@" ;;
  esac
}

_help() {
  cat <<EOF
Usage:
  $0 [help|list|doc]
  $0 run <NAME> -- locate (on the PATH or RUNBOOK_PATH) the named runbook file and run it
  $0 <FILE> -- run the named file as a runbook
EOF
}
# Show a list of all runbooks (and the first line of their doc)
_list() {
  for v in "$(pwd)" "$RUNBOOK_PATH"  ; do
    if [ -n "$v" ]; then
      echo "$v" | tr : "\n" | while read -r d; do
        if [ -d "$d" ] ; then
          find "$d" -maxdepth 1 -type f -size -50k -print0 | ( xargs -0 grep -l -E '^#!.*runbook' 2>/dev/null || true) \
          | while read -r file; do
            printf "%s -- %s\n" "$file" "$(_find_docline "$file")"
            done
        fi
      done
    fi
  done | sort -u
}

# find the first line of comment from a file and return it, stripped of the comment marker
_find_docline() {
  awk -F \# '/^ *##/{print $3; exit}' < "$1" || echo ""
}

# Resolve a name to a file, by searching PATH or RUNBOOK_PATH
_resolve_path() {
  if [ -f "$1" ]; then
    echo "$1"
    return
  fi

  # TODO: handle path components with spaces in them -- _list has the pattern to use
  for d in $(echo . "$RUNBOOK_PATH" "$PATH" | tr : ' '); do
    if [ -f "$d/$1" ]; then
      echo "$d/$1"
      return
    fi
  done

  echo "ERROR:  could not find runbook $1"
  exit 2
}

_run_runbook() {
  local params

  # shellcheck disable=SC1090
  source "$1"
  shift

  while [ -n "$*" ]; do
    case $1 in
    -doc) _mode="doc" ;;
    -h | -help)
      help
      exit 0
      ;;
    -v | -verbose) _verbose=true ;;
    --*) params+=("$1") ;;
    esac
    shift
  done

  if ! _has_all_parameters "${params[@]}"; then
    help
    exit 1
  fi

  _set_parameters "${params[@]}"

  runbook
}

# A runbook step
step() {
  doc="$1"
  shift
  _stepnumber=$((_stepnumber + 1))
  if [ "$_mode" == "doc" ]; then
    echo "${_stepnumber}: $doc"
    return
  fi

  local start
  start=$(date +%s)

  if [ -n "$*" ]; then
    printf "%2d: (%s) %s..." $_stepnumber "$(date +%H:%M)" "$doc"

    if _run "$@"; then
      printf " (%d s) " $(($(date +%s) - start))
      _green 'DONE'
      $_verbose && _show_output $_green $_stepnumber
    else
      _status=$((_status + 1))
      printf " (%d s) " $(($(date +%s) - start))
      _red "FAILED"
      _show_output $_red $_stepnumber
      exit $_status
    fi
  else
    printf "%2d: (%s) %s...(press enter when done)" $_stepnumber "$(date +%H:%M)" "$doc"
    read -r -s
    printf " (%d s) " $(($(date +%s) - start))
    _green 'DONE'
  fi

  _status+=0
}

# show the output from the last step
_show_output() {
  local color=$1
  local number=$2
  local c n
  c=$(tput setaf "$color")
  n=$(tput sgr0)

  awk "{print \"    $c>>$n \" \$0}" <"${_tmp}/step-${number}.txt"
}

_green() {
  _echoColor $_green "$@"
}

_red() {
  _echoColor $_red "$@"
}

_echoColor() {
  tput setaf "$1"
  shift
  echo "$@"
  tput sgr0
}

# Execute the passed in command and arrange for the output to display only if failed
_run() {
  if eval "$@" >"${_tmp}/step-${_stepnumber}.txt" 2>&1; then
    return 0
  else
    return 1
  fi
}

# Set the parameters required by the script
parameters() {
  _parameters=("$*")
}

# Set parameters into the environment
_set_parameters() {
  local name arg
  for arg in "$@"; do
    case $arg in
    --*)
      name="${arg/=*/}"
      name="${name/--/}"
      value="${arg/--*=/}"
      eval "$name='${value}'"
      ;;
    esac
  done
}

# Check to see if all parameters are set
_has_all_parameters() {
  local param ret paramsSet p arg
  declare -A paramsSet

  for arg in "$@"; do
    case $arg in
    --*)
      p="${arg/=*/}"
      p="${p/--/}"
      paramsSet[$p]=true
      ;;
    esac
  done

  ret=0
  for param in ${_parameters[*]}; do
    if [ -z "${!param:-}" ] && [ -z "${paramsSet[$param]:-}" ]; then
      ret=1
      echo "Parameter '$param' required"
    fi
  done

  return $ret
}

# Display help about the runbook
help() {
  local parameters="" param has_defaults=0
  #  local docs=_extract_runbook_doc
  for param in ${_parameters[*]}; do
    if [ -z "${!param:-}" ]; then
      parameters="${parameters}--${param}=VALUE "
    else
      has_defaults=1
      parameters="[${parameters}--${param}=VALUE] "
    fi
  done
  cat <<EOF
Usage: $0 [-h|-help] [-show] $parameters
EOF
  if [ $has_defaults == 1 ]; then
    echo "Defaults:"
    for param in ${_parameters[*]}; do
      if [ -n "${!param:-}" ]; then
        echo "  " "$param" = "${!param}"
      fi
    done
  fi
}

# Extract the documentation block
_extract_runbook_doc() {
  echo ""
}

main "$@"
